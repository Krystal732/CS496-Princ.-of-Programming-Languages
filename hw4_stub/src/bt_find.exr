
(* Find exercise  *)

let n_left = { data <= 12; left <= 0; right <= 0}    (* 0 in head signals null *)
in let n_right = { data <= 44; left <= 0; right <= 0}
in let n_root = { data <= 33; left <= n_left ; right <= n_right }
in let t1 = { root <= n_root ; size <= 3} 
in letrec find_bt_helper(node) = proc(d){
    if number?(node)
        then zero?(1)
    else if (node.data = d)
        then zero?(0)
    else if (node.data > d)
        then ((find_bt_helper node.left) d)
    else ((find_bt_helper node.right) d)
    
}
in let find_bt = proc (t) { proc (d) { ((find_bt_helper t.root)d) }  }
in ((find_bt t1) 12)
